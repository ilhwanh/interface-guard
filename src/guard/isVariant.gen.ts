import {Guard, LazyGuard} from "."

export function isVariant<Variant, KA extends string, VA>(variant: Variant, ka: KA, fa: LazyGuard<VA>): Guard<{ [ka in KA]: VA }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>, ks: KS, fs: LazyGuard<VS>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS, KT extends string, VT>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>, ks: KS, fs: LazyGuard<VS>, kt: KT, ft: LazyGuard<VT>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS, KT extends string, VT, KU extends string, VU>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>, ks: KS, fs: LazyGuard<VS>, kt: KT, ft: LazyGuard<VT>, ku: KU, fu: LazyGuard<VU>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS, KT extends string, VT, KU extends string, VU, KV extends string, VV>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>, ks: KS, fs: LazyGuard<VS>, kt: KT, ft: LazyGuard<VT>, ku: KU, fu: LazyGuard<VU>, kv: KV, fv: LazyGuard<VV>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS, KT extends string, VT, KU extends string, VU, KV extends string, VV, KW extends string, VW>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>, ks: KS, fs: LazyGuard<VS>, kt: KT, ft: LazyGuard<VT>, ku: KU, fu: LazyGuard<VU>, kv: KV, fv: LazyGuard<VV>, kw: KW, fw: LazyGuard<VW>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV } & { [kw in KW]: VW }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS, KT extends string, VT, KU extends string, VU, KV extends string, VV, KW extends string, VW, KX extends string, VX>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>, ks: KS, fs: LazyGuard<VS>, kt: KT, ft: LazyGuard<VT>, ku: KU, fu: LazyGuard<VU>, kv: KV, fv: LazyGuard<VV>, kw: KW, fw: LazyGuard<VW>, kx: KX, fx: LazyGuard<VX>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV } & { [kw in KW]: VW } & { [kx in KX]: VX }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS, KT extends string, VT, KU extends string, VU, KV extends string, VV, KW extends string, VW, KX extends string, VX, KY extends string, VY>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>, ks: KS, fs: LazyGuard<VS>, kt: KT, ft: LazyGuard<VT>, ku: KU, fu: LazyGuard<VU>, kv: KV, fv: LazyGuard<VV>, kw: KW, fw: LazyGuard<VW>, kx: KX, fx: LazyGuard<VX>, ky: KY, fy: LazyGuard<VY>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV } & { [kw in KW]: VW } & { [kx in KX]: VX } & { [ky in KY]: VY }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS, KT extends string, VT, KU extends string, VU, KV extends string, VV, KW extends string, VW, KX extends string, VX, KY extends string, VY, KZ extends string, VZ>(variant: Variant, ka: KA, fa: LazyGuard<VA>, kb: KB, fb: LazyGuard<VB>, kc: KC, fc: LazyGuard<VC>, kd: KD, fd: LazyGuard<VD>, ke: KE, fe: LazyGuard<VE>, kf: KF, ff: LazyGuard<VF>, kg: KG, fg: LazyGuard<VG>, kh: KH, fh: LazyGuard<VH>, ki: KI, fi: LazyGuard<VI>, kj: KJ, fj: LazyGuard<VJ>, kk: KK, fk: LazyGuard<VK>, kl: KL, fl: LazyGuard<VL>, km: KM, fm: LazyGuard<VM>, kn: KN, fn: LazyGuard<VN>, ko: KO, fo: LazyGuard<VO>, kp: KP, fp: LazyGuard<VP>, kq: KQ, fq: LazyGuard<VQ>, kr: KR, fr: LazyGuard<VR>, ks: KS, fs: LazyGuard<VS>, kt: KT, ft: LazyGuard<VT>, ku: KU, fu: LazyGuard<VU>, kv: KV, fv: LazyGuard<VV>, kw: KW, fw: LazyGuard<VW>, kx: KX, fx: LazyGuard<VX>, ky: KY, fy: LazyGuard<VY>, kz: KZ, fz: LazyGuard<VZ>): Guard<{ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV } & { [kw in KW]: VW } & { [kx in KX]: VX } & { [ky in KY]: VY } & { [kz in KZ]: VZ }>
export function isVariant<Variant, KA extends string, VA, KB extends string, VB, KC extends string, VC, KD extends string, VD, KE extends string, VE, KF extends string, VF, KG extends string, VG, KH extends string, VH, KI extends string, VI, KJ extends string, VJ, KK extends string, VK, KL extends string, VL, KM extends string, VM, KN extends string, VN, KO extends string, VO, KP extends string, VP, KQ extends string, VQ, KR extends string, VR, KS extends string, VS, KT extends string, VT, KU extends string, VU, KV extends string, VV, KW extends string, VW, KX extends string, VX, KY extends string, VY, KZ extends string, VZ>(variant: Variant, ka?: KA, fa?: LazyGuard<VA>, kb?: KB, fb?: LazyGuard<VB>, kc?: KC, fc?: LazyGuard<VC>, kd?: KD, fd?: LazyGuard<VD>, ke?: KE, fe?: LazyGuard<VE>, kf?: KF, ff?: LazyGuard<VF>, kg?: KG, fg?: LazyGuard<VG>, kh?: KH, fh?: LazyGuard<VH>, ki?: KI, fi?: LazyGuard<VI>, kj?: KJ, fj?: LazyGuard<VJ>, kk?: KK, fk?: LazyGuard<VK>, kl?: KL, fl?: LazyGuard<VL>, km?: KM, fm?: LazyGuard<VM>, kn?: KN, fn?: LazyGuard<VN>, ko?: KO, fo?: LazyGuard<VO>, kp?: KP, fp?: LazyGuard<VP>, kq?: KQ, fq?: LazyGuard<VQ>, kr?: KR, fr?: LazyGuard<VR>, ks?: KS, fs?: LazyGuard<VS>, kt?: KT, ft?: LazyGuard<VT>, ku?: KU, fu?: LazyGuard<VU>, kv?: KV, fv?: LazyGuard<VV>, kw?: KW, fw?: LazyGuard<VW>, kx?: KX, fx?: LazyGuard<VX>, ky?: KY, fy?: LazyGuard<VY>, kz?: KZ, fz?: LazyGuard<VZ>) {
  if (kz && fz && ky && fy && kx && fx && kw && fw && kv && fv && ku && fu && kt && ft && ks && fs && kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV } & { [kw in KW]: VW } & { [kx in KX]: VX } & { [ky in KY]: VY } & { [kz in KZ]: VZ }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr]) && fs()(x[ks]) && ft()(x[kt]) && fu()(x[ku]) && fv()(x[kv]) && fw()(x[kw]) && fx()(x[kx]) && fy()(x[ky]) && fz()(x[kz])
    }
  } else if (ky && fy && kx && fx && kw && fw && kv && fv && ku && fu && kt && ft && ks && fs && kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV } & { [kw in KW]: VW } & { [kx in KX]: VX } & { [ky in KY]: VY }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr]) && fs()(x[ks]) && ft()(x[kt]) && fu()(x[ku]) && fv()(x[kv]) && fw()(x[kw]) && fx()(x[kx]) && fy()(x[ky])
    }
  } else if (kx && fx && kw && fw && kv && fv && ku && fu && kt && ft && ks && fs && kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV } & { [kw in KW]: VW } & { [kx in KX]: VX }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr]) && fs()(x[ks]) && ft()(x[kt]) && fu()(x[ku]) && fv()(x[kv]) && fw()(x[kw]) && fx()(x[kx])
    }
  } else if (kw && fw && kv && fv && ku && fu && kt && ft && ks && fs && kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV } & { [kw in KW]: VW }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr]) && fs()(x[ks]) && ft()(x[kt]) && fu()(x[ku]) && fv()(x[kv]) && fw()(x[kw])
    }
  } else if (kv && fv && ku && fu && kt && ft && ks && fs && kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU } & { [kv in KV]: VV }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr]) && fs()(x[ks]) && ft()(x[kt]) && fu()(x[ku]) && fv()(x[kv])
    }
  } else if (ku && fu && kt && ft && ks && fs && kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT } & { [ku in KU]: VU }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr]) && fs()(x[ks]) && ft()(x[kt]) && fu()(x[ku])
    }
  } else if (kt && ft && ks && fs && kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS } & { [kt in KT]: VT }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr]) && fs()(x[ks]) && ft()(x[kt])
    }
  } else if (ks && fs && kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR } & { [ks in KS]: VS }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr]) && fs()(x[ks])
    }
  } else if (kr && fr && kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ } & { [kr in KR]: VR }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq]) && fr()(x[kr])
    }
  } else if (kq && fq && kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP } & { [kq in KQ]: VQ }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp]) && fq()(x[kq])
    }
  } else if (kp && fp && ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO } & { [kp in KP]: VP }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko]) && fp()(x[kp])
    }
  } else if (ko && fo && kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN } & { [ko in KO]: VO }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn]) && fo()(x[ko])
    }
  } else if (kn && fn && km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM } & { [kn in KN]: VN }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km]) && fn()(x[kn])
    }
  } else if (km && fm && kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL } & { [km in KM]: VM }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl]) && fm()(x[km])
    }
  } else if (kl && fl && kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK } & { [kl in KL]: VL }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk]) && fl()(x[kl])
    }
  } else if (kk && fk && kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ } & { [kk in KK]: VK }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj]) && fk()(x[kk])
    }
  } else if (kj && fj && ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI } & { [kj in KJ]: VJ }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki]) && fj()(x[kj])
    }
  } else if (ki && fi && kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH } & { [ki in KI]: VI }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh]) && fi()(x[ki])
    }
  } else if (kh && fh && kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG } & { [kh in KH]: VH }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg]) && fh()(x[kh])
    }
  } else if (kg && fg && kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF } & { [kg in KG]: VG }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf]) && fg()(x[kg])
    }
  } else if (kf && ff && ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE } & { [kf in KF]: VF }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke]) && ff()(x[kf])
    }
  } else if (ke && fe && kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD } & { [ke in KE]: VE }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd]) && fe()(x[ke])
    }
  } else if (kd && fd && kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC } & { [kd in KD]: VD }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc]) && fd()(x[kd])
    }
  } else if (kc && fc && kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB } & { [kc in KC]: VC }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb]) && fc()(x[kc])
    }
  } else if (kb && fb && ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA } & { [kb in KB]: VB }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka]) && fb()(x[kb])
    }
  } else if (ka && fa) {
    return function (x: any): x is ({ [ka in KA]: VA }) {
      return typeof x === "object" && x.type === variant && fa()(x[ka])
    }
  }
}